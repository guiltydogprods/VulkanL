# Alternative GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug_x64
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild

SHELLTYPE := posix
ifeq (.exe,$(findstring .exe,$(ComSpec)))
	SHELLTYPE := msdos
endif

# Configurations
# #############################################

ifeq ($(origin CC), default)
  CC = clang
endif
ifeq ($(origin CXX), default)
  CXX = clang++
endif
ifeq ($(origin AR), default)
  AR = ar
endif
PCH = stdafx.h
PCH_PLACEHOLDER = $(OBJDIR)/$(notdir $(PCH))
GCH = $(PCH_PLACEHOLDER).gch
INCLUDES += -I.. -I. -I"$(VK_SDK_PATH)/Include" -I../external/glfw-3.3/include -I../external/stb
FORCE_INCLUDE +=
ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
LIBS += -lglfw3 -lvulkan
LDDEPS +=
LINKCMD = $(CC) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
define PREBUILDCMDS
endef
define PRELINKCMDS
endef
define POSTBUILDCMDS
endef

ifeq ($(config),debug_x64)
TARGETDIR = ../bin/Debug
TARGET = $(TARGETDIR)/VulkanL
OBJDIR = obj/x64/Debug
DEFINES += -D_CRT_SECURE_NO_WARNINGS -DMACOS -DARM64 -DRE_PLATFORM_MACOS -DDEBUG -DMEM_DEBUG
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -g -Xclang -flto-visibility-public-std -fblocks
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -g -Xclang -flto-visibility-public-std -fblocks
ALL_LDFLAGS += $(LDFLAGS) -L../external/glfw-3.3/lib-macos -L"$(VK_SDK_PATH)/lib" -L../lib/Debug -framework Cocoa -framework IOKit -framework CoreFoundation -framework IOSurface -framework Metal -framework QuartzCore

else ifeq ($(config),debug_arm64)
TARGETDIR = ../bin/Debug
TARGET = $(TARGETDIR)/VulkanL
OBJDIR = obj/arm64/Debug
DEFINES += -D_CRT_SECURE_NO_WARNINGS -DMACOS -DARM64 -DRE_PLATFORM_MACOS -DDEBUG -DMEM_DEBUG
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -g -Xclang -flto-visibility-public-std -fblocks
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -g -Xclang -flto-visibility-public-std -fblocks
ALL_LDFLAGS += $(LDFLAGS) -L../external/glfw-3.3/lib-macos -L"$(VK_SDK_PATH)/lib" -L../lib/Debug -framework Cocoa -framework IOKit -framework CoreFoundation -framework IOSurface -framework Metal -framework QuartzCore

else ifeq ($(config),release_x64)
TARGETDIR = ../bin/Release
TARGET = $(TARGETDIR)/VulkanL
OBJDIR = obj/x64/Release
DEFINES += -D_CRT_SECURE_NO_WARNINGS -DMACOS -DARM64 -DRE_PLATFORM_MACOS -DNDEBUG
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -O2 -Xclang -flto-visibility-public-std -fblocks
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -O2 -Xclang -flto-visibility-public-std -fblocks
ALL_LDFLAGS += $(LDFLAGS) -L../external/glfw-3.3/lib-macos -L"$(VK_SDK_PATH)/lib" -L../lib/Release -framework Cocoa -framework IOKit -framework CoreFoundation -framework IOSurface -framework Metal -framework QuartzCore

else ifeq ($(config),release_arm64)
TARGETDIR = ../bin/Release
TARGET = $(TARGETDIR)/VulkanL
OBJDIR = obj/arm64/Release
DEFINES += -D_CRT_SECURE_NO_WARNINGS -DMACOS -DARM64 -DRE_PLATFORM_MACOS -DNDEBUG
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -O2 -Xclang -flto-visibility-public-std -fblocks
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -O2 -Xclang -flto-visibility-public-std -fblocks
ALL_LDFLAGS += $(LDFLAGS) -L../external/glfw-3.3/lib-macos -L"$(VK_SDK_PATH)/lib" -L../lib/Release -framework Cocoa -framework IOKit -framework CoreFoundation -framework IOSurface -framework Metal -framework QuartzCore

endif

# Per File Configurations
# #############################################


# File sets
# #############################################

GENERATED :=
OBJECTS :=

GENERATED += $(OBJDIR)/debugRender.o
GENERATED += $(OBJDIR)/file.o
GENERATED += $(OBJDIR)/hash.o
GENERATED += $(OBJDIR)/main.o
GENERATED += $(OBJDIR)/renderer.o
GENERATED += $(OBJDIR)/renderer_vk.o
GENERATED += $(OBJDIR)/resource.o
GENERATED += $(OBJDIR)/stdafx.o
GENERATED += $(OBJDIR)/system.o
OBJECTS += $(OBJDIR)/debugRender.o
OBJECTS += $(OBJDIR)/file.o
OBJECTS += $(OBJDIR)/hash.o
OBJECTS += $(OBJDIR)/main.o
OBJECTS += $(OBJDIR)/renderer.o
OBJECTS += $(OBJDIR)/renderer_vk.o
OBJECTS += $(OBJDIR)/resource.o
OBJECTS += $(OBJDIR)/stdafx.o
OBJECTS += $(OBJDIR)/system.o

# Rules
# #############################################

all: $(TARGET)
	@:

$(TARGET): $(GENERATED) $(OBJECTS) $(LDDEPS) | $(TARGETDIR)
	$(PRELINKCMDS)
	@echo Linking VulkanL
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning VulkanL
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(GENERATED)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(GENERATED)) rmdir /s /q $(subst /,\\,$(GENERATED))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild: | $(OBJDIR)
	$(PREBUILDCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) | $(PCH_PLACEHOLDER)
$(GCH): $(PCH) | prebuild
	@echo $(notdir $<)
	$(SILENT) $(CC) -x c-header $(ALL_CFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
$(PCH_PLACEHOLDER): $(GCH) | $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) touch "$@"
else
	$(SILENT) echo $null >> "$@"
endif
else
$(OBJECTS): | prebuild
endif


# File Rules
# #############################################

$(OBJDIR)/file.o: file.c
	@echo $(notdir $<)
	$(SILENT) $(CC) -include $(PCH_PLACEHOLDER) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/hash.o: hash.c
	@echo $(notdir $<)
	$(SILENT) $(CC) -include $(PCH_PLACEHOLDER) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/main.o: main.c
	@echo $(notdir $<)
	$(SILENT) $(CC) -include $(PCH_PLACEHOLDER) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/resource.o: resource.c
	@echo $(notdir $<)
	$(SILENT) $(CC) -include $(PCH_PLACEHOLDER) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/renderer_vk.o: rgfx/Vulkan/renderer_vk.c
	@echo $(notdir $<)
	$(SILENT) $(CC) -include $(PCH_PLACEHOLDER) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/debugRender.o: rgfx/debugRender.c
	@echo $(notdir $<)
	$(SILENT) $(CC) -include $(PCH_PLACEHOLDER) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/renderer.o: rgfx/renderer.c
	@echo $(notdir $<)
	$(SILENT) $(CC) -include $(PCH_PLACEHOLDER) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/stdafx.o: stdafx.c
	@echo $(notdir $<)
	$(SILENT) $(CC) -include $(PCH_PLACEHOLDER) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/system.o: system.c
	@echo $(notdir $<)
	$(SILENT) $(CC) -include $(PCH_PLACEHOLDER) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(PCH_PLACEHOLDER).d
endif